name: Wine-Crossover-MacOS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
    # avoid weird linker errors with Xcode 10 and later
    MACOSX_DEPLOYMENT_TARGET: 10.14
    # directories / files inside the downloaded tar file directory structure
    WINE_CONFIGURE: ${{ github.workspace }}/sources/wine/configure
    DXVK_BUILDSCRIPT: ${{ github.workspace }}/sources/dxvk/package-release.sh
    # build directories
    BUILDROOT: ${{ github.workspace }}/build
    LLVM_BUILDDIR: ${{ github.workspace }}/build/llvm
    CLANG_BUILDDIR: ${{ github.workspace }}/build/clang
    # target directory for installation
    INSTALLROOT: ${{ github.workspace }}/install

jobs:
  wine-crossover:

    strategy:
      fail-fast: false
      matrix:
        CROSS_OVER_VERSION: [21.0.0, 20.0.4, 19.0.2] # 20.0.2, 20.0.1, 20.0.0

    runs-on:  macos-10.15

    env:
      # crossover source code to be downloaded
      CROSS_OVER_SOURCE_URL: https://media.codeweavers.com/pub/crossover/source/crossover-sources-${{ matrix.CROSS_OVER_VERSION }}.tar.gz
      CROSS_OVER_LOCAL_FILE: crossover-${{ matrix.CROSS_OVER_VERSION }}
      # directories / files inside the downloaded tar file directory structure
      LLVM_MAKEDIR: $GITHUB_WORKSPACE/sources/${{ startsWith(matrix.CROSS_OVER_VERSION, '2') && 'clang/llvm' || 'llvm' }}
      CLANG_MAKEDIR: $GITHUB_WORKSPACE/sources/${{ startsWith(matrix.CROSS_OVER_VERSION, '2') && 'clang/clang' || 'clang' }}
      # artifact names
      TOOLS_INSTALLATION: build-tools-cx${{ matrix.CROSS_OVER_VERSION }}
      WINE_INSTALLATION: wine-cx${{ matrix.CROSS_OVER_VERSION }}
      DXVK_INSTALLATION: dxvk-cx${{ matrix.CROSS_OVER_VERSION }}

    steps:

      ############ Prepare Workspace / Environment ##############

      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Dependencies
        run: |
          # build tools
          brew install  cmake            \
                        ninja            \
                        mingw-w64        \

          # build dependencies for wine / crossover
          brew install  freetype         \
                        bison            \
                        krb5             \
                        faudio           \
                        sdl2             \
                        gphoto2          \
                        sane-backends    \
                        gst-plugins-base \
                        mpg123           \
                        little-cms2      \
                        libpng           \
                        molten-vk

          # dependencies for dxvk
          brew install  coreutils \
                        meson     \
                        glslang

      - name: Add bison & krb5 to $PATH
        run: |
          set -x
          echo "$(brew --prefix bison)/bin" >> $GITHUB_PATH
          echo "$(brew --prefix krb5)/bin" >> $GITHUB_PATH

      - name: Add llvm/clang to $PATH (for later)
        run: |
          set -x
          echo "${{ env.INSTALLROOT }}/${{ env.TOOLS_INSTALLATION }}/bin" >> $GITHUB_PATH


      ############ Download and Prepare Source Code ##############

      - name: Get Source
        run:  |
          curl -o ${{ env.CROSS_OVER_LOCAL_FILE }}.tar.gz ${{ env.CROSS_OVER_SOURCE_URL }}

      - name: Extract Source
        run:  |
          tar xf ${{ env.CROSS_OVER_LOCAL_FILE }}.tar.gz

      - name: Add missing llvm/clang
        if: ${{ matrix.CROSS_OVER_VERSION == '20.0.1' || matrix.CROSS_OVER_VERSION == '20.0.2' }}
        run: |
          curl -o crossover-20.0.0.tar.gz https://media.codeweavers.com/pub/crossover/source/crossover-sources-20.0.0.tar.gz
          tar -xf crossover-20.0.0.tar.gz sources/clang

      - name: Add distversion.h
        run: cp distversion.h sources/wine/include/distversion.h

      - name: Patch wcslen() in ntdll/wcstring.c to prevent crash if a nullptr is supplied to the function (HACK)
        if: startsWith(matrix.CROSS_OVER_VERSION, '20')
        run: patch sources/wine/dlls/ntdll/wcstring.c < wcstring.patch

      - name: Patch msvcrt to export the missing sincos function, see https://github.com/wine-mirror/wine/commit/f0131276474997b9d4e593bbf8c5616b879d3bd5
        if: startsWith(matrix.CROSS_OVER_VERSION, '20')
        run: |
          pushd sources/wine
          patch -p1 < ${{ github.workspace }}/msvcrt-sincos.patch
          popd

      - name: Patch DXVK
        if: startsWith(matrix.CROSS_OVER_VERSION, '20')
        run: patch sources/dxvk/src/util/rc/util_rc_ptr.h < dxvk_util_rc_ptr.patch

      ############ Restore LLVM / Clang from cache ##############

      - name: Restore LLVM / Clang from cache
        uses: actions/cache@v2
        id: cache_llvm_clang
        with:
          path: ${{ env.INSTALLROOT }}/${{ env.TOOLS_INSTALLATION }}
          key: llvm_clang-${{ matrix.CROSS_OVER_VERSION }}

      ############ Build LLVM / Clang (if restore from cache failed) ##############

      - name: Configure LLVM
        if: steps.cache_llvm_clang.outputs.cache-hit != 'true'
        run: |
          set -x
          mkdir -p ${{ env.LLVM_BUILDDIR }}
          pushd ${{ env.LLVM_BUILDDIR }}
          cmake -G Ninja \
                -DLLVM_TARGETS_TO_BUILD=X86 \
                -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_INSTALL_PREFIX="${{ env.INSTALLROOT }}/${{ env.TOOLS_INSTALLATION }}" \
                ${{ env.LLVM_MAKEDIR }}
          popd

      - name: Build LLVM
        if: steps.cache_llvm_clang.outputs.cache-hit != 'true'
        run: |
          pushd ${{ env.LLVM_BUILDDIR }}
          Ninja
          popd

      - name: Install LLVM
        if: steps.cache_llvm_clang.outputs.cache-hit != 'true'
        run: |
          pushd ${{ env.LLVM_BUILDDIR }}
          Ninja install
          popd

      - name: Configure Clang
        if: steps.cache_llvm_clang.outputs.cache-hit != 'true'
        run: |
          set -x
          mkdir -p ${{ env.CLANG_BUILDDIR }}
          pushd ${{ env.CLANG_BUILDDIR }}
          cmake -G Ninja \
                -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_INSTALL_PREFIX="${{ env.INSTALLROOT }}/${{ env.TOOLS_INSTALLATION }}" \
                ${{ env.CLANG_MAKEDIR }}
          popd

      - name: Build Clang
        if: steps.cache_llvm_clang.outputs.cache-hit != 'true'
        run: |
          pushd ${{ env.CLANG_BUILDDIR }}
          Ninja
          popd

      - name: Install Clang
        if: steps.cache_llvm_clang.outputs.cache-hit != 'true'
        run: |
          pushd ${{ env.CLANG_BUILDDIR }}
          Ninja install
          popd

      - name: Tar Build Tools
        if: steps.cache_llvm_clang.outputs.cache-hit != 'true'
        run: |
          set -x
          pushd ${{ env.INSTALLROOT }}
          tar -czf ${{ env.TOOLS_INSTALLATION }}.tar.gz ${{ env.TOOLS_INSTALLATION }}
          ls -alt
          popd

      - name: Upload Build Tools
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.TOOLS_INSTALLATION }}
          path: ${{ env.INSTALLROOT }}/${{ env.TOOLS_INSTALLATION }}.tar.gz


      ############ Build DXVK ##############

      #- name: Build DXVK
      #  if: startsWith(matrix.CROSS_OVER_VERSION, '20')
      #  run: |
      #    set -x
      #    PATH="$(brew --prefix coreutils)/libexec/gnubin:${PATH}" ${{ env.DXVK_BUILDSCRIPT }} master ${{ env.INSTALLROOT }}/${{ env.DXVK_INSTALLATION }} --no-package

      #- name: Tar DXVK
      #  if: startsWith(matrix.CROSS_OVER_VERSION, '20')
      #  run: |
      #    set -x
      #    pushd ${{ env.INSTALLROOT }}
      #    tar -czf ${{ env.DXVK_INSTALLATION }}.tar.gz ${{ env.DXVK_INSTALLATION }}
      #    popd

      #- name: Upload DXVK
      #  if: startsWith(matrix.CROSS_OVER_VERSION, '20')
      #  uses: actions/upload-artifact@v2
      #  with:
      #    name: ${{ env.DXVK_INSTALLATION }}
      #    path: ${{ env.INSTALLROOT }}/${{ env.DXVK_INSTALLATION }}.tar.gz


      ############ Configure 64bit Version ##############

      - name: Configure wine64 (specific to 21)
        if: startsWith(matrix.CROSS_OVER_VERSION, '21')
        uses: ./.github/actions/configure_wine
        with:
          winearch: "wine64"
          build-dir: "${{ env.BUILDROOT }}/wine64"
          crossflags: "-g -O2"
          configure-params: "--enable-win64 --with-vulkan"

      - name: Configure wine64 (specific to 20)
        if: startsWith(matrix.CROSS_OVER_VERSION, '20')
        uses: ./.github/actions/configure_wine
        with:
          winearch: "wine64"
          build-dir: "${{ env.BUILDROOT }}/wine64"
          crossflags: "-g -O2"
          configure-params: "--enable-win64 --with-vulkan"

      - name: Configure wine64 (specific to 19)
        if: startsWith(matrix.CROSS_OVER_VERSION, '19')
        uses: ./.github/actions/configure_wine
        with:
          winearch: "wine64"
          build-dir: "${{ env.BUILDROOT }}/wine64"
          crossflags: "-g -O2 -fcommon"
          configure-params: "--enable-win64 --with-vulkan"

      ############ Build 64bit Version ##############

      - name: Build wine64
        uses: ./.github/actions/make
        with:
          build-dir: "${{ env.BUILDROOT }}/wine64"

      ############ Configure 32on64bit Version ##############

      - name: Configure wine32on64 (specific to 21)
        if: startsWith(matrix.CROSS_OVER_VERSION, '21')
        uses: ./.github/actions/configure_wine
        with:
          winearch: "wine32on64"
          build-dir: "${{ env.BUILDROOT }}/wine32on64"
          crossflags: "-g -O2"
          configure-params: "--enable-win32on64 --with-wine64=${{ env.BUILDROOT }}/wine64 --without-cms --without-gstreamer --without-gphoto --without-sane --without-krb5"

      - name: Configure wine32on64 (specific to 20)
        if: startsWith(matrix.CROSS_OVER_VERSION, '20')
        uses: ./.github/actions/configure_wine
        with:
          winearch: "wine32on64"
          build-dir: "${{ env.BUILDROOT }}/wine32on64"
          crossflags: "-g -O2"
          configure-params: "--enable-win32on64 --with-wine64=${{ env.BUILDROOT }}/wine64 --without-cms --without-gstreamer --without-gphoto --without-sane --without-krb5 --disable-winedbg --without-vkd3d --without-vulkan --disable-vulkan_1 --disable-winevulkan"

      - name: Configure wine32on64 (specific to 19)
        if: startsWith(matrix.CROSS_OVER_VERSION, '19')
        uses: ./.github/actions/configure_wine
        with:
          winearch: "wine32on64"
          build-dir: "${{ env.BUILDROOT }}/wine32on64"
          crossflags: "-g -O2 -fcommon"
          configure-params: "--enable-win32on64 --with-wine64=${{ env.BUILDROOT }}/wine64 --without-cms --without-gstreamer --without-gphoto --without-sane --without-krb5 --disable-winedbg --without-vkd3d --without-vulkan --disable-vulkan_1 --disable-winevulkan"

      ############ Build 32on64bit Version ##############

      - name: Build wine32on64
        uses: ./.github/actions/make
        with:
          build-dir: "${{ env.BUILDROOT }}/wine32on64"

      ############ Install wine ##############

      - name: Install wine32on64
        uses: ./.github/actions/install
        with:
          build-dir: "${{ env.BUILDROOT }}/wine32on64"
          install-dir: "${{ env.INSTALLROOT }}/${{ env.WINE_INSTALLATION }}"

      - name: Install wine64
        uses: ./.github/actions/install
        with:
          build-dir: "${{ env.BUILDROOT }}/wine64"
          install-dir: "${{ env.INSTALLROOT }}/${{ env.WINE_INSTALLATION }}"

      ############ Bundle and Upload Deliverable ##############

      - name: Tar Wine
        run: |
          set -x
          pushd ${{ env.INSTALLROOT }}
          tar -czvf ${{ env.WINE_INSTALLATION }}.tar.gz ${{ env.WINE_INSTALLATION }}
          popd

      - name: Upload Wine
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.WINE_INSTALLATION }}
          path: ${{ env.INSTALLROOT }}/${{ env.WINE_INSTALLATION }}.tar.gz
